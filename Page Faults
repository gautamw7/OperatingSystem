#include<iostream> 
#include<queue> 
#include<list> 
#include<algorithm> 
#include<vector> 
#include<unordered_map> 
 
using namespace std; 
 
 
int fifoPageFaults(const vector<char>& referenceString, int capacity) { 
queue<char> pageQueue; 
unordered_map<char, bool> pageSet; 
int pageFaults = 0; 
 
for (char page : referenceString) { 
if (pageSet.find(page) == pageSet.end()) { 
if (pageQueue.size() == capacity) { 
char oldestPage = pageQueue.front(); 
Write a program to calculate the number of page faults for a reference string 
for the following page replacement algorithms: 
1. FIFO 
2. LRU 
3. Optimal 
 
 
Code: 
 
 
2 
 
 
 
 
 
 
pageQueue.pop(); 
 
pageSet.erase(oldestPage); 
 
} 
 
pageQueue.push(page); 
 
pageSet[page] = true; 
 
pageFaults++; 
 
} 
 
} 
 
 
return pageFaults; 
 
} 
 
 
int lruPageFaults(const vector<char>& referenceString, int capacity) { 
 
list<char> pageList; 
 
unordered_map<char, list<char>::iterator> pageMap; 
 
int pageFaults = 0; 
 
 
for (char page : referenceString) { 
 
if (pageMap.find(page) != pageMap.end()) { 
 
pageList.erase(pageMap[page]); 
 
} else { 
 
if (pageList.size() == capacity) { 
 
char oldestPage = pageList.back(); 
 
pageList.pop_back(); 
 
pageMap.erase(oldestPage); 
 
} 
 
pageFaults++; 
 
} 
 
 
pageList.push_front(page); 
 
pageMap[page] = pageList.begin(); 
 
3 
 
 
 
 
 
 
} 
 
 
return pageFaults; 
 
} 
 
 
int optimalPageFaults(const vector<char>& referenceString, int capacity) { 
 
unordered_map<char, int> nextPageIndex; 
 
int pageFaults = 0; 
 
 
for (int i = 0; i < referenceString.size(); ++i) { 
 
char page = referenceString[i]; 
 
 
if (nextPageIndex.find(page) == nextPageIndex.end()) { 
 
if (nextPageIndex.size() == capacity) { 
 
char farthestPage = '\0'; 
 
int farthestIndex = -1; 
 
for (const auto& entry : nextPageIndex) { 
 
if (entry.second > farthestIndex) { 
 
farthestPage = entry.first; 
 
farthestIndex = entry.second; 
 
} 
 
} 
 
nextPageIndex.erase(farthestPage); 
 
} 
 
pageFaults++; 
 
} 
 
 
nextPageIndex[page] = i; 
 
} 
 
 
return pageFaults; 
 
4 
 
 
 
 
 
 
} 
 
 
int main() { 
 
int capacity; 
 
cout << "Enter the number of page frames: "; 
 
cin >> capacity; 
 
 
int n; 
 
cout << "Enter the size of reference string: "; 
 
cin >> n; 
 
 
vector<char> referenceString(n); 
 
cout << "Enter the elements of reference string (separated by space): "; 
 
for (int i = 0; i < n; ++i) { 
 
cin >> referenceString[i]; 
 
} 
 
 
int choice; 
 
do { 
 
cout << "\nPage Replacement Algorithms Menu:\n"; 
 
cout << "1. FIFO\n"; 
 
cout << "2. LRU\n"; 
 
cout << "3. Optimal\n"; 
 
cout << "4. Exit\n"; 
 
cout << "Enter your choice: "; 
 
cin >> choice; 
 
 
switch (choice) { 
 
case 1: 
 
cout << "FIFO Page Faults: " << fifoPageFaults(referenceString, 
 
capacity) << endl; 
 
5 
 
 
break; 
case 2: 
cout << "LRU Page Faults: " << lruPageFaults(referenceString, 
capacity) << endl; 
break; 
case 3: 
cout << "Optimal Page Faults: " << 
optimalPageFaults(referenceString, capacity) << endl; 
break; 
case 4: 
cout << "Exiting the program.\n"; 
break; 
default: 
cout << "Invalid choice. Please enter a valid option.\n"; 
} 
} while (choice != 4); 
 
 
return 0; 
} 
