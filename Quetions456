#include<iostream>
#include<vector>
#include<queue>
using namespace std;

struct process {
    int id;
    int arrival_time;
    int burst_time;
    process(int id, int arrival_time, int burst_time) {
        this->id = id;
        this->arrival_time = arrival_time;
        this->burst_time = burst_time;
    }
};



void printTable(vector<process> &processes, vector<int> complete_times, vector<int> turn_around_times, vector<int> wait_time, vector<int> respone_time) {
    for(int i = 0; i < processes.size(); i++) {
        cout << "ID: " << processes[i].id << " Arrival time: " << processes[i].arrival_time << " Burst time: " << processes[i].burst_time;
        cout << " Completion Time: " << complete_times[i] << " Turn Around Time: " << turn_around_times[i] <<
                " Wait Time " << wait_time[i] << " Response Time: " << respone_time[i] << endl;
    }
}

struct CompareProcessFCFS {
    bool operator() (process p1, process p2) {
        if(p1.arrival_time == p2.arrival_time) {
            return p1.id > p2.id;
        }
        return p1.arrival_time > p2.arrival_time;
    }
};


void FirstComeFirstServe(vector<process> &processes) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);

    priority_queue<process, vector<process>, CompareProcessFCFS> ready_queue;
    for(int i = 0; i < size; i++) {
        ready_queue.push(processes[i]);
    }
    int current_time = 0;
    while(!ready_queue.empty()) {
        if(current_time >= ready_queue.top().arrival_time) {
            respone_time[ready_queue.top().id] = current_time - ready_queue.top().arrival_time;
            current_time = current_time + ready_queue.top().burst_time;
            complete_times[ready_queue.top().id] = current_time;
            turn_around_times[ready_queue.top().id] = complete_times[ready_queue.top().id] - ready_queue.top().arrival_time;
            wait_time[ready_queue.top().id] = turn_around_times[ready_queue.top().id] - ready_queue.top().burst_time;
            ready_queue.pop();
        }else {
            current_time++;
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

struct CompareProcessNPSJF {
    bool operator() (process p1, process p2) {
        if(p1.arrival_time == p2.arrival_time) {
            if(p1.burst_time == p2.burst_time) {
                return p1.id > p2.id;
            }
            return p1.burst_time > p2.burst_time;
        }
        return p1.arrival_time > p2.arrival_time;
    }
};

void ShortestJobFirstNonPrimitive(vector<process> &processes) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);

    priority_queue<process, vector<process>, CompareProcessNPSJF> ready_queue;
    for(int i = 0; i < size; i++) {
        ready_queue.push(processes[i]);
    }
    int current_time = 0;
    while(!ready_queue.empty()) {
        if(current_time >= ready_queue.top().arrival_time) {
            respone_time[ready_queue.top().id] = current_time - ready_queue.top().arrival_time;
            current_time = current_time + ready_queue.top().burst_time;
            complete_times[ready_queue.top().id] = current_time;
            turn_around_times[ready_queue.top().id] = complete_times[ready_queue.top().id] - ready_queue.top().arrival_time;
            wait_time[ready_queue.top().id] = turn_around_times[ready_queue.top().id] - ready_queue.top().burst_time;
            ready_queue.pop();
        }else {
            current_time++;
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

struct CompareProcessPSJF {
    bool operator() (process p1, process p2) {
        if(p1.burst_time == p2.burst_time) {
            return p1.arrival_time > p2.arrival_time;
        }
        return p1.burst_time > p2.burst_time;
    }
};

void ShortestJobFirstPrimitive(vector<process> &processes) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);
    vector<process> operation_copy = processes;
    priority_queue<process, vector<process>, CompareProcessPSJF> ready_queue;
    int completed = 0;
    int current_time = 0;
    vector<bool> is_completed(size, false);

    while(completed < size) {
        for(int i = 0; i < size; i++) {
            if(operation_copy[i].burst_time > 0 && operation_copy[i].arrival_time <= current_time ) {
                ready_queue.push(operation_copy[i]);
            }
        }

        if(ready_queue.empty()) {
            current_time++;
            continue;
        }
        process current_process = ready_queue.top();
        int id = current_process.id;
        ready_queue.pop();

        if(!is_completed[id]) {
            operation_copy[id].burst_time--;
            if(operation_copy[id].burst_time + 1 == processes[id].burst_time) {
                respone_time[id] = current_time - processes[id].arrival_time;
            }
            current_time++;

            if(operation_copy[id].burst_time == 0) {
                is_completed[id] = true;
                completed++;

                complete_times[id] = current_time;
                turn_around_times[id] = complete_times[id] - processes[id].arrival_time;
                wait_time[id] = turn_around_times[id] - processes[id].burst_time;
                //cout << "Completed Process ID: " << id << " at time " << current_time << endl;
            }
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

struct ComparePriorty {
    bool operator() (pair<process, int> p1, pair<process, int> p2) {
        if(p1.second == p2.second) {
            return p1.first.arrival_time > p2.first.arrival_time;
        }
        return p1.second < p2.second;
    }
};


void PriortyJobNonPrimitive(vector<process> processes, vector<int> priority) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);

    vector<pair<process, int>> priority_processes;
    for(int i = 0; i < size; i++) {
        priority_processes.push_back(make_pair(processes[i], priority[i]));
    }
    priority_queue<pair<process, int>, vector<pair<process, int>>, ComparePriorty> ready_queue;

    int completed = 0;
    int current_time = 0;
    vector<bool> is_completed(size, false);

    while(completed < size) {
        for(int i = 0; i < size; i++) {
            if( !is_completed[i] && processes[i].arrival_time <= current_time) {
                ready_queue.push(make_pair(processes[i], priority[i]));
            }
        }

        if(ready_queue.empty()) {
            current_time++;
            continue;
        }
        int id = ready_queue.top().first.id;
        ready_queue.pop();

        if(!is_completed[id]) {
            is_completed[id] = true;
            respone_time[id] = current_time - processes[id].arrival_time;
            current_time = current_time + processes[id].burst_time;
            complete_times[id] = current_time;
            turn_around_times[id] = complete_times[id] - processes[id].arrival_time;
            wait_time[id] = turn_around_times[id] - processes[id].burst_time;
            completed++;
        }
    }

    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

void PriortyJobPrimitive(vector<process> processes, vector<int> priority) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);
    vector<pair<process, int>> priority_processes;

    for(int i = 0; i < size; i++) {
        priority_processes.push_back(make_pair(processes[i], priority[i]));
    }
    vector<pair<process, int>> Operations_priority_processes = priority_processes;

    priority_queue<pair<process, int>, vector<pair<process, int>>, ComparePriorty> ready_queue;

    int completed = 0;
    int current_time = 0;
    vector<bool> is_completed(size, false);

    while(completed < size) {
        for(int i = 0; i < size; i++) {
            if( !is_completed[i] && processes[i].arrival_time <= current_time) {
                ready_queue.push(make_pair(processes[i], priority[i]));
            }
        }

        if(ready_queue.empty()) {
           current_time++;
            continue;
        }

        int id = ready_queue.top().first.id;
        ready_queue.pop();

        if(!is_completed[id]) {
            Operations_priority_processes[id].first.burst_time--;
            if(Operations_priority_processes[id].first.burst_time + 1 == processes[id].burst_time) {
                respone_time[id] = current_time - processes[id].arrival_time;
            }
            current_time++;
            if(Operations_priority_processes[id].first.burst_time == 0) {
                is_completed[id] = true;
                complete_times[id] = current_time;
                turn_around_times[id] = complete_times[id] - processes[id].arrival_time;
                wait_time[id] = turn_around_times[id] - processes[id].burst_time;
                completed++;
            }
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}


int main() {
    int n;
   // cout << "Enter number of processes: ";
    //cin >> n;
    vector<process> processes1 = {{0,0,2}, {1,1,2}, {2,5,3}, {3,6,4}};
    vector<process> processes2 = {{0,1,3}, {1,2,4}, {2,1,2}, {3,4,4}};
    vector<process> processes3 = {{0,0,5}, {1,1,3}, {2,2,4}, {3,4,1}};
    vector<process> processes4 = {{0,0,5}, {1,1,4}, {2,2,2}, {3,4,1}};
    vector<int> priorty = {10,20,30,40};

    /*for (int i = 0; i < n; i++) {
        process temp(0, 0, 0);
        temp.id = i ;
        cout << "Process ID: " << i+1 << endl;
        cout << "Enter arrival time: ";
        cin >> temp.arrival_time;
        cout << "Enter burst time: ";
        cin >> temp.burst_time;
        processes.push_back(temp);
    }

    //FirstComeFirstServe(processes1);
    //ShortestJobFirstNonPrimitive(processes2);
    //ShortestJobFirstPrimitive(processes3);
    //PriortyJobNonPrimitive(processes4, priorty);
    PriortyJobPrimitive(processes4, priorty);
}

#include<iostream>
#include<vector>
#include<queue>
using namespace std;

struct process {
    int id;
    int arrival_time;
    int burst_time;
    process(int id, int arrival_time, int burst_time) {
        this->id = id;
        this->arrival_time = arrival_time;
        this->burst_time = burst_time;
    }
};



void printTable(vector<process> &processes, vector<int> complete_times, vector<int> turn_around_times, vector<int> wait_time, vector<int> respone_time) {
    for(int i = 0; i < processes.size(); i++) {
        cout << "ID: " << processes[i].id << " Arrival time: " << processes[i].arrival_time << " Burst time: " << processes[i].burst_time;
        cout << " Completion Time: " << complete_times[i] << " Turn Around Time: " << turn_around_times[i] <<
                " Wait Time " << wait_time[i] << " Response Time: " << respone_time[i] << endl;
    }
}

struct CompareProcessFCFS {
    bool operator() (process p1, process p2) {
        if(p1.arrival_time == p2.arrival_time) {
            return p1.id > p2.id;
        }
        return p1.arrival_time > p2.arrival_time;
    }
};


void FirstComeFirstServe(vector<process> &processes) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);

    priority_queue<process, vector<process>, CompareProcessFCFS> ready_queue;
    for(int i = 0; i < size; i++) {
        ready_queue.push(processes[i]);
    }
    int current_time = 0;
    while(!ready_queue.empty()) {
        if(current_time >= ready_queue.top().arrival_time) {
            respone_time[ready_queue.top().id] = current_time - ready_queue.top().arrival_time;
            current_time = current_time + ready_queue.top().burst_time;
            complete_times[ready_queue.top().id] = current_time;
            turn_around_times[ready_queue.top().id] = complete_times[ready_queue.top().id] - ready_queue.top().arrival_time;
            wait_time[ready_queue.top().id] = turn_around_times[ready_queue.top().id] - ready_queue.top().burst_time;
            ready_queue.pop();
        }else {
            current_time++;
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

struct CompareProcessNPSJF {
    bool operator() (process p1, process p2) {
        if(p1.arrival_time == p2.arrival_time) {
            if(p1.burst_time == p2.burst_time) {
                return p1.id > p2.id;
            }
            return p1.burst_time > p2.burst_time;
        }
        return p1.arrival_time > p2.arrival_time;
    }
};

void ShortestJobFirstNonPrimitive(vector<process> &processes) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);

    priority_queue<process, vector<process>, CompareProcessNPSJF> ready_queue;
    for(int i = 0; i < size; i++) {
        ready_queue.push(processes[i]);
    }
    int current_time = 0;
    while(!ready_queue.empty()) {
        if(current_time >= ready_queue.top().arrival_time) {
            respone_time[ready_queue.top().id] = current_time - ready_queue.top().arrival_time;
            current_time = current_time + ready_queue.top().burst_time;
            complete_times[ready_queue.top().id] = current_time;
            turn_around_times[ready_queue.top().id] = complete_times[ready_queue.top().id] - ready_queue.top().arrival_time;
            wait_time[ready_queue.top().id] = turn_around_times[ready_queue.top().id] - ready_queue.top().burst_time;
            ready_queue.pop();
        }else {
            current_time++;
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

struct CompareProcessPSJF {
    bool operator() (process p1, process p2) {
        if(p1.burst_time == p2.burst_time) {
            return p1.arrival_time > p2.arrival_time;
        }
        return p1.burst_time > p2.burst_time;
    }
};

void ShortestJobFirstPrimitive(vector<process> &processes) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);
    vector<process> operation_copy = processes;
    priority_queue<process, vector<process>, CompareProcessPSJF> ready_queue;
    int completed = 0;
    int current_time = 0;
    vector<bool> is_completed(size, false);

    while(completed < size) {
        for(int i = 0; i < size; i++) {
            if(operation_copy[i].burst_time > 0 && operation_copy[i].arrival_time <= current_time ) {
                ready_queue.push(operation_copy[i]);
            }
        }

        if(ready_queue.empty()) {
            current_time++;
            continue;
        }
        process current_process = ready_queue.top();
        int id = current_process.id;
        ready_queue.pop();

        if(!is_completed[id]) {
            operation_copy[id].burst_time--;
            if(operation_copy[id].burst_time + 1 == processes[id].burst_time) {
                respone_time[id] = current_time - processes[id].arrival_time;
            }
            current_time++;

            if(operation_copy[id].burst_time == 0) {
                is_completed[id] = true;
                completed++;

                complete_times[id] = current_time;
                turn_around_times[id] = complete_times[id] - processes[id].arrival_time;
                wait_time[id] = turn_around_times[id] - processes[id].burst_time;
                //cout << "Completed Process ID: " << id << " at time " << current_time << endl;
            }
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

struct ComparePriorty {
    bool operator() (pair<process, int> p1, pair<process, int> p2) {
        if(p1.second == p2.second) {
            return p1.first.arrival_time > p2.first.arrival_time;
        }
        return p1.second < p2.second;
    }
};


void PriortyJobNonPrimitive(vector<process> processes, vector<int> priority) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);

    vector<pair<process, int>> priority_processes;
    for(int i = 0; i < size; i++) {
        priority_processes.push_back(make_pair(processes[i], priority[i]));
    }
    priority_queue<pair<process, int>, vector<pair<process, int>>, ComparePriorty> ready_queue;

    int completed = 0;
    int current_time = 0;
    vector<bool> is_completed(size, false);

    while(completed < size) {
        for(int i = 0; i < size; i++) {
            if( !is_completed[i] && processes[i].arrival_time <= current_time) {
                ready_queue.push(make_pair(processes[i], priority[i]));
            }
        }

        if(ready_queue.empty()) {
            current_time++;
            continue;
        }
        int id = ready_queue.top().first.id;
        ready_queue.pop();

        if(!is_completed[id]) {
            is_completed[id] = true;
            respone_time[id] = current_time - processes[id].arrival_time;
            current_time = current_time + processes[id].burst_time;
            complete_times[id] = current_time;
            turn_around_times[id] = complete_times[id] - processes[id].arrival_time;
            wait_time[id] = turn_around_times[id] - processes[id].burst_time;
            completed++;
        }
    }

    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}

void PriortyJobPrimitive(vector<process> processes, vector<int> priority) {
    int size = processes.size();
    vector<int> complete_times(size), turn_around_times(size), wait_time(size), respone_time(size);
    vector<pair<process, int>> priority_processes;

    for(int i = 0; i < size; i++) {
        priority_processes.push_back(make_pair(processes[i], priority[i]));
    }
    vector<pair<process, int>> Operations_priority_processes = priority_processes;

    priority_queue<pair<process, int>, vector<pair<process, int>>, ComparePriorty> ready_queue;

    int completed = 0;
    int current_time = 0;
    vector<bool> is_completed(size, false);

    while(completed < size) {
        for(int i = 0; i < size; i++) {
            if( !is_completed[i] && processes[i].arrival_time <= current_time) {
                ready_queue.push(make_pair(processes[i], priority[i]));
            }
        }

        if(ready_queue.empty()) {
           current_time++;
            continue;
        }

        int id = ready_queue.top().first.id;
        ready_queue.pop();

        if(!is_completed[id]) {
            Operations_priority_processes[id].first.burst_time--;
            if(Operations_priority_processes[id].first.burst_time + 1 == processes[id].burst_time) {
                respone_time[id] = current_time - processes[id].arrival_time;
            }
            current_time++;
            if(Operations_priority_processes[id].first.burst_time == 0) {
                is_completed[id] = true;
                complete_times[id] = current_time;
                turn_around_times[id] = complete_times[id] - processes[id].arrival_time;
                wait_time[id] = turn_around_times[id] - processes[id].burst_time;
                completed++;
            }
        }
    }
    cout << "Finish Time: " << current_time << endl;
    printTable(processes, complete_times, turn_around_times, wait_time, respone_time);
}


int main() {
    int n;
   // cout << "Enter number of processes: ";
    //cin >> n;
    vector<process> processes1 = {{0,0,2}, {1,1,2}, {2,5,3}, {3,6,4}};
    vector<process> processes2 = {{0,1,3}, {1,2,4}, {2,1,2}, {3,4,4}};
    vector<process> processes3 = {{0,0,5}, {1,1,3}, {2,2,4}, {3,4,1}};
    vector<process> processes4 = {{0,0,5}, {1,1,4}, {2,2,2}, {3,4,1}};
    vector<int> priorty = {10,20,30,40};

    /*for (int i = 0; i < n; i++) {
        process temp(0, 0, 0);
        temp.id = i ;
        cout << "Process ID: " << i+1 << endl;
        cout << "Enter arrival time: ";
        cin >> temp.arrival_time;
        cout << "Enter burst time: ";
        cin >> temp.burst_time;
        processes.push_back(temp);
    }

    //FirstComeFirstServe(processes1);
    //ShortestJobFirstNonPrimitive(processes2);
    //ShortestJobFirstPrimitive(processes3);
    //PriortyJobNonPrimitive(processes4, priorty);
    PriortyJobPrimitive(processes4, priorty);
}

