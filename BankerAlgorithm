#include <stdio.h> 
int main() { 
int n, m; 
printf("Enter the number of processes: "); 
scanf("%d", &n); 
printf("Enter the number of resource types: "); 
scanf("%d", &m); 
 
int max[n][m], allocation[n][m], need[n][m], available[m]; 
int finish[n], safeSeq[n]; 
 
// Input maximum resource instances for each resource type: 
printf("Enter the maximum resource instances for each resource type:\n"); 
for (int i = 0; i < m; i++) { 
printf("Resource type %d: ", i); 
scanf("%d", &available[i]); 
} 
 
// Input maximum resource allocation for each process: 
printf("Enter the maximum resource allocation for each process:\n"); 
for (int i = 0; i < n; i++) { 
printf("Process %d: ", i); 
for (int j = 0; j < m; j++) { 
scanf("%d", &max[i][j]); 
} 
finish[i] = 0; // Initialize all processes as unfinished 
} 
 
// Input the current resource allocation for each process: 
printf("Enter the current resource allocation for each process:\n"); 
for (int i = 0; i < n; i++) { 
printf("Process %d: ", i); 
for (int j = 0; j < m; j++) { 
scanf("%d", &allocation[i][j]); 
available[j] -= allocation[i][j]; // Update available resources 
} 
} 
 
// Calculate the need matrix: 
for (int i = 0; i < n; i++) { 
for (int j = 0; j < m; j++) { 
need[i][j] = max[i][j] - allocation[i][j]; 
} 
} 
 
// Banker's Algorithm (finding the safe sequence): 
int count = 0; 
while (count < n) { 
int found = 0; 
for (int i = 0; i < n; i++) { 
if (finish[i] == 0) { 
int j; 
for (j = 0; j < m; j++) { 
if (need[i][j] > available[j]) {
break; 
} 
} 
if (j == m) { 
for (int k = 0; k < m; k++) { 
available[k] += allocation[i][k]; 
} 
safeSeq[count++] = i; 
finish[i] = 1; 
found = 1; 
} 
} 
} 
if (!found) { 
printf("System is NOT in a safe state.\n"); 
return 1; // Exiting with an error code 
} 
} 
 
// If all processes are in the safe sequence, print the output: 
printf("System is in a safe state.\nSafe Sequence: "); 
for (int i = 0; i < n - 1; i++) { 
printf("P%d -> ", safeSeq[i]); 
} 
printf("P%d\n", safeSeq[n - 1]); 
 
return 0; 
} 

/*
Enter the number of processes:3
 Enter the number of resource types:3
 Enter the maximum resource instances for each resourc
e type:
Resource type 0:10
 Resource type 1:5
 Resource type 2:7
 Enter the maximum resource allocation for each process:
Process 0:7 5 3
 Process 1:3 2 2 
 Process 2:9 0 2
 Enter the current resource allocation for each process:
Process 0:0 1 0
 Process 1:2 0 0
 Process 2:3 0 2
 System is in a safe state.
Safe Sequence: P1 -> P2 -> P0

*/
